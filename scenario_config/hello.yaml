import tkinter as tk
from tkinter import ttk

class ScenarioGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Scenario Configuration")

        # 初始化字體大小
        self.font_size = 24
        self.font = ("Arial", self.font_size)

        # 設置視窗大小並綁定調整大小的事件
        self.root.geometry("1920x1080")
        self.root.bind("<Configure>", self.adjust_font_size)

        # Initialize frames
        self.create_ego_frame()
        self.create_map_frame()
        self.create_actors_frame()
        self.create_output_frame()

    def adjust_font_size(self, event):
        # 根據視窗的高度和寬度調整字體大小
        new_size = min(int(event.width / 80), int(event.height / 40))
        self.font_size = max(new_size, 10)  # 設置最小字體大小為10
        self.font = ("Arial", self.font_size)

        # 更新所有字體
        self.update_fonts()

    def update_fonts(self):
        # 更新所有控件的字體大小
        for widget in self.root.winfo_children():
            widget_type = widget.winfo_class()
            if widget_type in ("TLabel", "TButton", "TEntry", "Text"):
                widget.config(font=self.font)
            for child in widget.winfo_children():
                if isinstance(child, (tk.Entry, ttk.Label, ttk.Button, tk.Text)):
                    child.config(font=self.font)

    def create_ego_frame(self):
        # Ego Configuration Frame
        ego_frame = ttk.LabelFrame(self.root, text="Ego Configuration")
        ego_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(ego_frame, text="Start Position [Road, Lane, s, Offset]").grid(row=0, column=0, padx=5, pady=5)
        self.ego_start_pos = tk.Entry(ego_frame)
        self.ego_start_pos.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(ego_frame, text="End Position [Road, Lane, s, Offset]").grid(row=1, column=0, padx=5, pady=5)
        self.ego_end_pos = tk.Entry(ego_frame)
        self.ego_end_pos.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(ego_frame, text="Start Speed (km/h)").grid(row=2, column=0, padx=5, pady=5)
        self.ego_start_speed = tk.Entry(ego_frame)
        self.ego_start_speed.grid(row=2, column=1, padx=5, pady=5)

    def create_map_frame(self):
        # Map Configuration Frame
        map_frame = ttk.LabelFrame(self.root, text="Map Configuration")
        map_frame.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(map_frame, text="Map (Clockwise index)").grid(row=0, column=0, padx=5, pady=5)
        self.map_config = tk.Entry(map_frame)
        self.map_config.grid(row=0, column=1, padx=5, pady=5)

    def create_actors_frame(self):
        # Actors Configuration Frame
        actors_frame = ttk.LabelFrame(self.root, text="Actors Configuration")
        actors_frame.grid(row=2, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(actors_frame, text="Agent 1 Start Pos [Road, Lane, s, Offset]").grid(row=0, column=0, padx=5, pady=5)
        self.agent1_start_pos = tk.Entry(actors_frame)
        self.agent1_start_pos.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(actors_frame, text="Agent 1 Start Speed (km/h)").grid(row=1, column=0, padx=5, pady=5)
        self.agent1_start_speed = tk.Entry(actors_frame)
        self.agent1_start_speed.grid(row=1, column=1, padx=5, pady=5)

        ttk.Label(actors_frame, text="Agent 1 Cut-in Delay").grid(row=2, column=0, padx=5, pady=5)
        self.agent1_cutin_delay = tk.Entry(actors_frame)
        self.agent1_cutin_delay.grid(row=2, column=1, padx=5, pady=5)

        ttk.Label(actors_frame, text="Agent 1 Cut-in End (s)").grid(row=3, column=0, padx=5, pady=5)
        self.agent1_cutin_end = tk.Entry(actors_frame)
        self.agent1_cutin_end.grid(row=3, column=1, padx=5, pady=5)

        ttk.Label(actors_frame, text="Agent 1 Cut-in Speed End (km/h)").grid(row=4, column=0, padx=5, pady=5)
        self.agent1_speed_end = tk.Entry(actors_frame)
        self.agent1_speed_end.grid(row=4, column=1, padx=5, pady=5)

    def create_output_frame(self):
        # Output Frame
        output_frame = ttk.LabelFrame(self.root, text="Generated YAML")
        output_frame.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

        self.yaml_output = tk.Text(output_frame, height=10)
        self.yaml_output.grid(row=0, column=0, padx=5, pady=5)
        
        generate_button = ttk.Button(output_frame, text="Generate YAML", command=self.generate_yaml)
        generate_button.grid(row=1, column=0, padx=5, pady=5)

    def generate_yaml(self):
        # Collect data from the fields and generate YAML format
        ego_start_pos = self.ego_start_pos.get()
        ego_end_pos = self.ego_end_pos.get()
        ego_start_speed = self.ego_start_speed.get()

        map_config = self.map_config.get()

        agent1_start_pos = self.agent1_start_pos.get()
        agent1_start_speed = self.agent1_start_speed.get()
        agent1_cutin_delay = self.agent1_cutin_delay.get()
        agent1_cutin_end = self.agent1_cutin_end.get()
        agent1_speed_end = self.agent1_speed_end.get()

        yaml_content = f"""
Scenario_name: example

Ego:
  End_pos: [{ego_end_pos}] 
  Start_pos: [{ego_start_pos}] 
  Start_speed: {ego_start_speed}

Map: # Clockwise index
  - {map_config}

Actors:
  Agents:
    - Type: 'car_red'
      Start_pos: [{agent1_start_pos}]
      Start_speed: {agent1_start_speed}
      Start_trigger: 
        lane: 2
        road: 0
        s: 60
        offset: 0
        type: absolute
      Acts:
        - Type: cut_in
          Delay: {agent1_cutin_delay}
          Events:
            - Type: cut
              Dynamic_delay: 0
              Dynamic_duration: 2
              Dynamic_shape: linear
              End: {agent1_cutin_end}
              Use_route: null
            - Type: speed
              Dynamic_delay: 0
              Dynamic_duration: 3
              Dynamic_shape: linear
              End: {agent1_speed_end}
              Use_route: null
        - Type: turn
"""
        self.yaml_output.delete("1.0", tk.END)
        self.yaml_output.insert(tk.END, yaml_content)

if __name__ == "__main__":
    root = tk.Tk()
    gui = ScenarioGUI(root)
    root.mainloop()
